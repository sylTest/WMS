//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("AuthorizeModel", "SystemModule", "System", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.System), "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.Module))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "ModuleFunction", "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Module), "Function", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.Function))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "ModuleModule", "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Module), "Module1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.Module))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "RoleRoleSystem", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Role), "RoleSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "RoleSystemRoleModule", "RoleSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.RoleSystem), "RoleModule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleModule))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "RoleModuleRoleFunction", "RoleModule", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.RoleModule), "RoleFunction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleFunction))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "RoleUserRole", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Role), "UserRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserRole))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "UserUserRole", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.User), "UserRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserRole))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "UserUserSystem", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.User), "UserSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "UserSystemUserModule", "UserSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.UserSystem), "UserModule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserModule))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "UserModuleUserFunction", "UserModule", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.UserModule), "UserFunction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserFunction))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "CityRoleSystem", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.City), "RoleSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "CityUserSystem", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.City), "UserSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "SystemRoleSystem", "System", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.System), "RoleSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "ModuleRoleModule", "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Module), "RoleModule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleModule))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "SystemUserSystem", "System", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.System), "UserSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserSystem))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "ModuleUserModule", "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Module), "UserModule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserModule))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "FunctionUserFunction", "Function", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Function), "UserFunction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.UserFunction))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "UserLoginLog", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.User), "LoginLog", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.LoginLog))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "SystemLoginLog", "System", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.System), "LoginLog", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.LoginLog))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "FunctionRoleFunction", "Function", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.Function), "RoleFunction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.RoleFunction))]
[assembly: EdmRelationshipAttribute("AuthorizeModel", "CityServer", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(THOK.Authority.Dal.EntityModels.City), "Server", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(THOK.Authority.Dal.EntityModels.Server))]

#endregion

namespace THOK.Authority.Dal.EntityModels
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class AuthorizeEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“AuthorizeEntities”部分中的连接字符串初始化新 AuthorizeEntities 对象。
        /// </summary>
        public AuthorizeEntities() : base("name=AuthorizeEntities", "AuthorizeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 AuthorizeEntities 对象。
        /// </summary>
        public AuthorizeEntities(string connectionString) : base(connectionString, "AuthorizeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 AuthorizeEntities 对象。
        /// </summary>
        public AuthorizeEntities(EntityConnection connection) : base(connection, "AuthorizeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Function> Function
        {
            get
            {
                if ((_Function == null))
                {
                    _Function = base.CreateObjectSet<Function>("Function");
                }
                return _Function;
            }
        }
        private ObjectSet<Function> _Function;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<LoginLog> LoginLog
        {
            get
            {
                if ((_LoginLog == null))
                {
                    _LoginLog = base.CreateObjectSet<LoginLog>("LoginLog");
                }
                return _LoginLog;
            }
        }
        private ObjectSet<LoginLog> _LoginLog;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Module> Module
        {
            get
            {
                if ((_Module == null))
                {
                    _Module = base.CreateObjectSet<Module>("Module");
                }
                return _Module;
            }
        }
        private ObjectSet<Module> _Module;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Role> Role
        {
            get
            {
                if ((_Role == null))
                {
                    _Role = base.CreateObjectSet<Role>("Role");
                }
                return _Role;
            }
        }
        private ObjectSet<Role> _Role;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<RoleFunction> RoleFunction
        {
            get
            {
                if ((_RoleFunction == null))
                {
                    _RoleFunction = base.CreateObjectSet<RoleFunction>("RoleFunction");
                }
                return _RoleFunction;
            }
        }
        private ObjectSet<RoleFunction> _RoleFunction;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<RoleModule> RoleModule
        {
            get
            {
                if ((_RoleModule == null))
                {
                    _RoleModule = base.CreateObjectSet<RoleModule>("RoleModule");
                }
                return _RoleModule;
            }
        }
        private ObjectSet<RoleModule> _RoleModule;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<RoleSystem> RoleSystem
        {
            get
            {
                if ((_RoleSystem == null))
                {
                    _RoleSystem = base.CreateObjectSet<RoleSystem>("RoleSystem");
                }
                return _RoleSystem;
            }
        }
        private ObjectSet<RoleSystem> _RoleSystem;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<System> System
        {
            get
            {
                if ((_System == null))
                {
                    _System = base.CreateObjectSet<System>("System");
                }
                return _System;
            }
        }
        private ObjectSet<System> _System;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<User> User
        {
            get
            {
                if ((_User == null))
                {
                    _User = base.CreateObjectSet<User>("User");
                }
                return _User;
            }
        }
        private ObjectSet<User> _User;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UserRole> UserRole
        {
            get
            {
                if ((_UserRole == null))
                {
                    _UserRole = base.CreateObjectSet<UserRole>("UserRole");
                }
                return _UserRole;
            }
        }
        private ObjectSet<UserRole> _UserRole;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UserFunction> UserFunction
        {
            get
            {
                if ((_UserFunction == null))
                {
                    _UserFunction = base.CreateObjectSet<UserFunction>("UserFunction");
                }
                return _UserFunction;
            }
        }
        private ObjectSet<UserFunction> _UserFunction;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UserModule> UserModule
        {
            get
            {
                if ((_UserModule == null))
                {
                    _UserModule = base.CreateObjectSet<UserModule>("UserModule");
                }
                return _UserModule;
            }
        }
        private ObjectSet<UserModule> _UserModule;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<City> City
        {
            get
            {
                if ((_City == null))
                {
                    _City = base.CreateObjectSet<City>("City");
                }
                return _City;
            }
        }
        private ObjectSet<City> _City;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UserSystem> UserSystem
        {
            get
            {
                if ((_UserSystem == null))
                {
                    _UserSystem = base.CreateObjectSet<UserSystem>("UserSystem");
                }
                return _UserSystem;
            }
        }
        private ObjectSet<UserSystem> _UserSystem;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Server> Server
        {
            get
            {
                if ((_Server == null))
                {
                    _Server = base.CreateObjectSet<Server>("Server");
                }
                return _Server;
            }
        }
        private ObjectSet<Server> _Server;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<SystemEventLog> SystemEventLogs
        {
            get
            {
                if ((_SystemEventLogs == null))
                {
                    _SystemEventLogs = base.CreateObjectSet<SystemEventLog>("SystemEventLogs");
                }
                return _SystemEventLogs;
            }
        }
        private ObjectSet<SystemEventLog> _SystemEventLogs;

        #endregion
        #region AddTo 方法
    
        /// <summary>
        /// 用于向 Function EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToFunction(Function function)
        {
            base.AddObject("Function", function);
        }
    
        /// <summary>
        /// 用于向 LoginLog EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToLoginLog(LoginLog loginLog)
        {
            base.AddObject("LoginLog", loginLog);
        }
    
        /// <summary>
        /// 用于向 Module EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToModule(Module module)
        {
            base.AddObject("Module", module);
        }
    
        /// <summary>
        /// 用于向 Role EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRole(Role role)
        {
            base.AddObject("Role", role);
        }
    
        /// <summary>
        /// 用于向 RoleFunction EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRoleFunction(RoleFunction roleFunction)
        {
            base.AddObject("RoleFunction", roleFunction);
        }
    
        /// <summary>
        /// 用于向 RoleModule EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRoleModule(RoleModule roleModule)
        {
            base.AddObject("RoleModule", roleModule);
        }
    
        /// <summary>
        /// 用于向 RoleSystem EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRoleSystem(RoleSystem roleSystem)
        {
            base.AddObject("RoleSystem", roleSystem);
        }
    
        /// <summary>
        /// 用于向 System EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToSystem(System system)
        {
            base.AddObject("System", system);
        }
    
        /// <summary>
        /// 用于向 User EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUser(User user)
        {
            base.AddObject("User", user);
        }
    
        /// <summary>
        /// 用于向 UserRole EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUserRole(UserRole userRole)
        {
            base.AddObject("UserRole", userRole);
        }
    
        /// <summary>
        /// 用于向 UserFunction EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUserFunction(UserFunction userFunction)
        {
            base.AddObject("UserFunction", userFunction);
        }
    
        /// <summary>
        /// 用于向 UserModule EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUserModule(UserModule userModule)
        {
            base.AddObject("UserModule", userModule);
        }
    
        /// <summary>
        /// 用于向 City EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToCity(City city)
        {
            base.AddObject("City", city);
        }
    
        /// <summary>
        /// 用于向 UserSystem EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUserSystem(UserSystem userSystem)
        {
            base.AddObject("UserSystem", userSystem);
        }
    
        /// <summary>
        /// 用于向 Server EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToServer(Server server)
        {
            base.AddObject("Server", server);
        }
    
        /// <summary>
        /// 用于向 SystemEventLogs EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToSystemEventLogs(SystemEventLog systemEventLog)
        {
            base.AddObject("SystemEventLogs", systemEventLog);
        }

        #endregion
    }
    

    #endregion
    
    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 City 对象。
        /// </summary>
        /// <param name="cityID">CityID 属性的初始值。</param>
        /// <param name="cityName">CityName 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static City CreateCity(global::System.Guid cityID, global::System.String cityName, global::System.Boolean isActive)
        {
            City city = new City();
            city.CityID = cityID;
            city.CityName = cityName;
            city.IsActive = isActive;
            return city;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                if (_CityID != value)
                {
                    OnCityIDChanging(value);
                    ReportPropertyChanging("CityID");
                    _CityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        private global::System.Guid _CityID;
        partial void OnCityIDChanging(global::System.Guid value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CityName
        {
            get
            {
                return _CityName;
            }
            set
            {
                OnCityNameChanging(value);
                ReportPropertyChanging("CityName");
                _CityName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CityName");
                OnCityNameChanged();
            }
        }
        private global::System.String _CityName;
        partial void OnCityNameChanging(global::System.String value);
        partial void OnCityNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityRoleSystem", "RoleSystem")]
        public EntityCollection<RoleSystem> RoleSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleSystem>("AuthorizeModel.CityRoleSystem", "RoleSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleSystem>("AuthorizeModel.CityRoleSystem", "RoleSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityUserSystem", "UserSystem")]
        public EntityCollection<UserSystem> UserSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSystem>("AuthorizeModel.CityUserSystem", "UserSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSystem>("AuthorizeModel.CityUserSystem", "UserSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityServer", "Server")]
        public EntityCollection<Server> Servers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Server>("AuthorizeModel.CityServer", "Server");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Server>("AuthorizeModel.CityServer", "Server", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="Function")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Function : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Function 对象。
        /// </summary>
        /// <param name="functionID">FunctionID 属性的初始值。</param>
        /// <param name="functionName">FunctionName 属性的初始值。</param>
        /// <param name="controlName">ControlName 属性的初始值。</param>
        public static Function CreateFunction(global::System.Guid functionID, global::System.String functionName, global::System.String controlName)
        {
            Function function = new Function();
            function.FunctionID = functionID;
            function.FunctionName = functionName;
            function.ControlName = controlName;
            return function;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FunctionID
        {
            get
            {
                return _FunctionID;
            }
            set
            {
                if (_FunctionID != value)
                {
                    OnFunctionIDChanging(value);
                    ReportPropertyChanging("FunctionID");
                    _FunctionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FunctionID");
                    OnFunctionIDChanged();
                }
            }
        }
        private global::System.Guid _FunctionID;
        partial void OnFunctionIDChanging(global::System.Guid value);
        partial void OnFunctionIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FunctionName
        {
            get
            {
                return _FunctionName;
            }
            set
            {
                OnFunctionNameChanging(value);
                ReportPropertyChanging("FunctionName");
                _FunctionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FunctionName");
                OnFunctionNameChanged();
            }
        }
        private global::System.String _FunctionName;
        partial void OnFunctionNameChanging(global::System.String value);
        partial void OnFunctionNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ControlName
        {
            get
            {
                return _ControlName;
            }
            set
            {
                OnControlNameChanging(value);
                ReportPropertyChanging("ControlName");
                _ControlName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ControlName");
                OnControlNameChanged();
            }
        }
        private global::System.String _ControlName;
        partial void OnControlNameChanging(global::System.String value);
        partial void OnControlNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IndicateImage
        {
            get
            {
                return _IndicateImage;
            }
            set
            {
                OnIndicateImageChanging(value);
                ReportPropertyChanging("IndicateImage");
                _IndicateImage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IndicateImage");
                OnIndicateImageChanged();
            }
        }
        private global::System.String _IndicateImage;
        partial void OnIndicateImageChanging(global::System.String value);
        partial void OnIndicateImageChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleFunction", "Module")]
        public Module Module
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleFunction", "Module").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleFunction", "Module").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleFunction", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("AuthorizeModel.ModuleFunction", "Module", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "FunctionUserFunction", "UserFunction")]
        public EntityCollection<UserFunction> UserFunctions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserFunction>("AuthorizeModel.FunctionUserFunction", "UserFunction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserFunction>("AuthorizeModel.FunctionUserFunction", "UserFunction", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "FunctionRoleFunction", "RoleFunction")]
        public EntityCollection<RoleFunction> RoleFunction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleFunction>("AuthorizeModel.FunctionRoleFunction", "RoleFunction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleFunction>("AuthorizeModel.FunctionRoleFunction", "RoleFunction", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="LoginLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LoginLog : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 LoginLog 对象。
        /// </summary>
        /// <param name="logID">LogID 属性的初始值。</param>
        /// <param name="loginPC">LoginPC 属性的初始值。</param>
        /// <param name="loginTime">LoginTime 属性的初始值。</param>
        public static LoginLog CreateLoginLog(global::System.Guid logID, global::System.String loginPC, global::System.String loginTime)
        {
            LoginLog loginLog = new LoginLog();
            loginLog.LogID = logID;
            loginLog.LoginPC = loginPC;
            loginLog.LoginTime = loginTime;
            return loginLog;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LogID
        {
            get
            {
                return _LogID;
            }
            set
            {
                if (_LogID != value)
                {
                    OnLogIDChanging(value);
                    ReportPropertyChanging("LogID");
                    _LogID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogID");
                    OnLogIDChanged();
                }
            }
        }
        private global::System.Guid _LogID;
        partial void OnLogIDChanging(global::System.Guid value);
        partial void OnLogIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoginPC
        {
            get
            {
                return _LoginPC;
            }
            set
            {
                OnLoginPCChanging(value);
                ReportPropertyChanging("LoginPC");
                _LoginPC = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LoginPC");
                OnLoginPCChanged();
            }
        }
        private global::System.String _LoginPC;
        partial void OnLoginPCChanging(global::System.String value);
        partial void OnLoginPCChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoginTime
        {
            get
            {
                return _LoginTime;
            }
            set
            {
                OnLoginTimeChanging(value);
                ReportPropertyChanging("LoginTime");
                _LoginTime = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LoginTime");
                OnLoginTimeChanged();
            }
        }
        private global::System.String _LoginTime;
        partial void OnLoginTimeChanging(global::System.String value);
        partial void OnLoginTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogoutTime
        {
            get
            {
                return _LogoutTime;
            }
            set
            {
                OnLogoutTimeChanging(value);
                ReportPropertyChanging("LogoutTime");
                _LogoutTime = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogoutTime");
                OnLogoutTimeChanged();
            }
        }
        private global::System.String _LogoutTime;
        partial void OnLogoutTimeChanging(global::System.String value);
        partial void OnLogoutTimeChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserLoginLog", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserLoginLog", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserLoginLog", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserLoginLog", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("AuthorizeModel.UserLoginLog", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemLoginLog", "System")]
        public System System
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemLoginLog", "System").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemLoginLog", "System").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<System> SystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemLoginLog", "System");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<System>("AuthorizeModel.SystemLoginLog", "System", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="Module")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Module : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Module 对象。
        /// </summary>
        /// <param name="moduleID">ModuleID 属性的初始值。</param>
        /// <param name="moduleName">ModuleName 属性的初始值。</param>
        /// <param name="showOrder">ShowOrder 属性的初始值。</param>
        /// <param name="moduleURL">ModuleURL 属性的初始值。</param>
        public static Module CreateModule(global::System.Guid moduleID, global::System.String moduleName, global::System.Int32 showOrder, global::System.String moduleURL)
        {
            Module module = new Module();
            module.ModuleID = moduleID;
            module.ModuleName = moduleName;
            module.ShowOrder = showOrder;
            module.ModuleURL = moduleURL;
            return module;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ModuleID
        {
            get
            {
                return _ModuleID;
            }
            set
            {
                if (_ModuleID != value)
                {
                    OnModuleIDChanging(value);
                    ReportPropertyChanging("ModuleID");
                    _ModuleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ModuleID");
                    OnModuleIDChanged();
                }
            }
        }
        private global::System.Guid _ModuleID;
        partial void OnModuleIDChanging(global::System.Guid value);
        partial void OnModuleIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ModuleName
        {
            get
            {
                return _ModuleName;
            }
            set
            {
                OnModuleNameChanging(value);
                ReportPropertyChanging("ModuleName");
                _ModuleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ModuleName");
                OnModuleNameChanged();
            }
        }
        private global::System.String _ModuleName;
        partial void OnModuleNameChanging(global::System.String value);
        partial void OnModuleNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShowOrder
        {
            get
            {
                return _ShowOrder;
            }
            set
            {
                OnShowOrderChanging(value);
                ReportPropertyChanging("ShowOrder");
                _ShowOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShowOrder");
                OnShowOrderChanged();
            }
        }
        private global::System.Int32 _ShowOrder;
        partial void OnShowOrderChanging(global::System.Int32 value);
        partial void OnShowOrderChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ModuleURL
        {
            get
            {
                return _ModuleURL;
            }
            set
            {
                OnModuleURLChanging(value);
                ReportPropertyChanging("ModuleURL");
                _ModuleURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ModuleURL");
                OnModuleURLChanged();
            }
        }
        private global::System.String _ModuleURL;
        partial void OnModuleURLChanging(global::System.String value);
        partial void OnModuleURLChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IndicateImage
        {
            get
            {
                return _IndicateImage;
            }
            set
            {
                OnIndicateImageChanging(value);
                ReportPropertyChanging("IndicateImage");
                _IndicateImage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IndicateImage");
                OnIndicateImageChanged();
            }
        }
        private global::System.String _IndicateImage;
        partial void OnIndicateImageChanging(global::System.String value);
        partial void OnIndicateImageChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeskTopImage
        {
            get
            {
                return _DeskTopImage;
            }
            set
            {
                OnDeskTopImageChanging(value);
                ReportPropertyChanging("DeskTopImage");
                _DeskTopImage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeskTopImage");
                OnDeskTopImageChanged();
            }
        }
        private global::System.String _DeskTopImage;
        partial void OnDeskTopImageChanging(global::System.String value);
        partial void OnDeskTopImageChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemModule", "System")]
        public System System
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemModule", "System").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemModule", "System").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<System> SystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemModule", "System");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<System>("AuthorizeModel.SystemModule", "System", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleFunction", "Function")]
        public EntityCollection<Function> Functions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Function>("AuthorizeModel.ModuleFunction", "Function");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Function>("AuthorizeModel.ModuleFunction", "Function", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleModule", "Module1")]
        public EntityCollection<Module> Modules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Module>("AuthorizeModel.ModuleModule", "Module1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Module>("AuthorizeModel.ModuleModule", "Module1", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleModule", "Module")]
        public Module ParentModule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleModule", "Module").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleModule", "Module").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ParentModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleModule", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("AuthorizeModel.ModuleModule", "Module", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleRoleModule", "RoleModule")]
        public EntityCollection<RoleModule> RoleModules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleModule>("AuthorizeModel.ModuleRoleModule", "RoleModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleModule>("AuthorizeModel.ModuleRoleModule", "RoleModule", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleUserModule", "UserModule")]
        public EntityCollection<UserModule> UserModules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserModule>("AuthorizeModel.ModuleUserModule", "UserModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserModule>("AuthorizeModel.ModuleUserModule", "UserModule", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Role 对象。
        /// </summary>
        /// <param name="roleID">RoleID 属性的初始值。</param>
        /// <param name="roleName">RoleName 属性的初始值。</param>
        /// <param name="isLock">IsLock 属性的初始值。</param>
        public static Role CreateRole(global::System.Guid roleID, global::System.String roleName, global::System.Boolean isLock)
        {
            Role role = new Role();
            role.RoleID = roleID;
            role.RoleName = roleName;
            role.IsLock = isLock;
            return role;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    OnRoleIDChanging(value);
                    ReportPropertyChanging("RoleID");
                    _RoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        private global::System.Guid _RoleID;
        partial void OnRoleIDChanging(global::System.Guid value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsLock
        {
            get
            {
                return _IsLock;
            }
            set
            {
                OnIsLockChanging(value);
                ReportPropertyChanging("IsLock");
                _IsLock = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsLock");
                OnIsLockChanged();
            }
        }
        private global::System.Boolean _IsLock;
        partial void OnIsLockChanging(global::System.Boolean value);
        partial void OnIsLockChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Memo
        {
            get
            {
                return _Memo;
            }
            set
            {
                OnMemoChanging(value);
                ReportPropertyChanging("Memo");
                _Memo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Memo");
                OnMemoChanged();
            }
        }
        private global::System.String _Memo;
        partial void OnMemoChanging(global::System.String value);
        partial void OnMemoChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleRoleSystem", "RoleSystem")]
        public EntityCollection<RoleSystem> RoleSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleSystem>("AuthorizeModel.RoleRoleSystem", "RoleSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleSystem>("AuthorizeModel.RoleRoleSystem", "RoleSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleUserRole", "UserRole")]
        public EntityCollection<UserRole> UserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRole>("AuthorizeModel.RoleUserRole", "UserRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRole>("AuthorizeModel.RoleUserRole", "UserRole", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="RoleFunction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RoleFunction : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 RoleFunction 对象。
        /// </summary>
        /// <param name="roleFunctionID">RoleFunctionID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static RoleFunction CreateRoleFunction(global::System.Guid roleFunctionID, global::System.Boolean isActive)
        {
            RoleFunction roleFunction = new RoleFunction();
            roleFunction.RoleFunctionID = roleFunctionID;
            roleFunction.IsActive = isActive;
            return roleFunction;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleFunctionID
        {
            get
            {
                return _RoleFunctionID;
            }
            set
            {
                if (_RoleFunctionID != value)
                {
                    OnRoleFunctionIDChanging(value);
                    ReportPropertyChanging("RoleFunctionID");
                    _RoleFunctionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleFunctionID");
                    OnRoleFunctionIDChanged();
                }
            }
        }
        private global::System.Guid _RoleFunctionID;
        partial void OnRoleFunctionIDChanging(global::System.Guid value);
        partial void OnRoleFunctionIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleModuleRoleFunction", "RoleModule")]
        public RoleModule RoleModule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleModule>("AuthorizeModel.RoleModuleRoleFunction", "RoleModule").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleModule>("AuthorizeModel.RoleModuleRoleFunction", "RoleModule").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RoleModule> RoleModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleModule>("AuthorizeModel.RoleModuleRoleFunction", "RoleModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RoleModule>("AuthorizeModel.RoleModuleRoleFunction", "RoleModule", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "FunctionRoleFunction", "Function")]
        public Function Function
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionRoleFunction", "Function").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionRoleFunction", "Function").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Function> FunctionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionRoleFunction", "Function");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Function>("AuthorizeModel.FunctionRoleFunction", "Function", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="RoleModule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RoleModule : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 RoleModule 对象。
        /// </summary>
        /// <param name="roleModuleID">RoleModuleID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static RoleModule CreateRoleModule(global::System.Guid roleModuleID, global::System.Boolean isActive)
        {
            RoleModule roleModule = new RoleModule();
            roleModule.RoleModuleID = roleModuleID;
            roleModule.IsActive = isActive;
            return roleModule;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleModuleID
        {
            get
            {
                return _RoleModuleID;
            }
            set
            {
                if (_RoleModuleID != value)
                {
                    OnRoleModuleIDChanging(value);
                    ReportPropertyChanging("RoleModuleID");
                    _RoleModuleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleModuleID");
                    OnRoleModuleIDChanged();
                }
            }
        }
        private global::System.Guid _RoleModuleID;
        partial void OnRoleModuleIDChanging(global::System.Guid value);
        partial void OnRoleModuleIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleSystemRoleModule", "RoleSystem")]
        public RoleSystem RoleSystem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleSystem>("AuthorizeModel.RoleSystemRoleModule", "RoleSystem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleSystem>("AuthorizeModel.RoleSystemRoleModule", "RoleSystem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RoleSystem> RoleSystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoleSystem>("AuthorizeModel.RoleSystemRoleModule", "RoleSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RoleSystem>("AuthorizeModel.RoleSystemRoleModule", "RoleSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleModuleRoleFunction", "RoleFunction")]
        public EntityCollection<RoleFunction> RoleFunctions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleFunction>("AuthorizeModel.RoleModuleRoleFunction", "RoleFunction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleFunction>("AuthorizeModel.RoleModuleRoleFunction", "RoleFunction", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleRoleModule", "Module")]
        public Module Module
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleRoleModule", "Module").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleRoleModule", "Module").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleRoleModule", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("AuthorizeModel.ModuleRoleModule", "Module", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="RoleSystem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RoleSystem : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 RoleSystem 对象。
        /// </summary>
        /// <param name="roleSystemID">RoleSystemID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static RoleSystem CreateRoleSystem(global::System.Guid roleSystemID, global::System.Boolean isActive)
        {
            RoleSystem roleSystem = new RoleSystem();
            roleSystem.RoleSystemID = roleSystemID;
            roleSystem.IsActive = isActive;
            return roleSystem;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RoleSystemID
        {
            get
            {
                return _RoleSystemID;
            }
            set
            {
                if (_RoleSystemID != value)
                {
                    OnRoleSystemIDChanging(value);
                    ReportPropertyChanging("RoleSystemID");
                    _RoleSystemID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleSystemID");
                    OnRoleSystemIDChanged();
                }
            }
        }
        private global::System.Guid _RoleSystemID;
        partial void OnRoleSystemIDChanging(global::System.Guid value);
        partial void OnRoleSystemIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleRoleSystem", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleRoleSystem", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleRoleSystem", "Role").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleRoleSystem", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("AuthorizeModel.RoleRoleSystem", "Role", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleSystemRoleModule", "RoleModule")]
        public EntityCollection<RoleModule> RoleModules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleModule>("AuthorizeModel.RoleSystemRoleModule", "RoleModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleModule>("AuthorizeModel.RoleSystemRoleModule", "RoleModule", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityRoleSystem", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityRoleSystem", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityRoleSystem", "City").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityRoleSystem", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("AuthorizeModel.CityRoleSystem", "City", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemRoleSystem", "System")]
        public System System
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemRoleSystem", "System").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemRoleSystem", "System").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<System> SystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemRoleSystem", "System");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<System>("AuthorizeModel.SystemRoleSystem", "System", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="Server")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Server : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Server 对象。
        /// </summary>
        /// <param name="serverID">ServerID 属性的初始值。</param>
        /// <param name="serverName">ServerName 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static Server CreateServer(global::System.Guid serverID, global::System.String serverName, global::System.Boolean isActive)
        {
            Server server = new Server();
            server.ServerID = serverID;
            server.ServerName = serverName;
            server.IsActive = isActive;
            return server;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ServerID
        {
            get
            {
                return _ServerID;
            }
            set
            {
                if (_ServerID != value)
                {
                    OnServerIDChanging(value);
                    ReportPropertyChanging("ServerID");
                    _ServerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ServerID");
                    OnServerIDChanged();
                }
            }
        }
        private global::System.Guid _ServerID;
        partial void OnServerIDChanging(global::System.Guid value);
        partial void OnServerIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerName
        {
            get
            {
                return _ServerName;
            }
            set
            {
                OnServerNameChanging(value);
                ReportPropertyChanging("ServerName");
                _ServerName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ServerName");
                OnServerNameChanged();
            }
        }
        private global::System.String _ServerName;
        partial void OnServerNameChanging(global::System.String value);
        partial void OnServerNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityServer", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityServer", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityServer", "City").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityServer", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("AuthorizeModel.CityServer", "City", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="System")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class System : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 System 对象。
        /// </summary>
        /// <param name="systemID">SystemID 属性的初始值。</param>
        /// <param name="systemName">SystemName 属性的初始值。</param>
        /// <param name="status">Status 属性的初始值。</param>
        public static System CreateSystem(global::System.Guid systemID, global::System.String systemName, global::System.Boolean status)
        {
            System system = new System();
            system.SystemID = systemID;
            system.SystemName = systemName;
            system.Status = status;
            return system;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SystemID
        {
            get
            {
                return _SystemID;
            }
            set
            {
                if (_SystemID != value)
                {
                    OnSystemIDChanging(value);
                    ReportPropertyChanging("SystemID");
                    _SystemID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SystemID");
                    OnSystemIDChanged();
                }
            }
        }
        private global::System.Guid _SystemID;
        partial void OnSystemIDChanging(global::System.Guid value);
        partial void OnSystemIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SystemName
        {
            get
            {
                return _SystemName;
            }
            set
            {
                OnSystemNameChanging(value);
                ReportPropertyChanging("SystemName");
                _SystemName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SystemName");
                OnSystemNameChanged();
            }
        }
        private global::System.String _SystemName;
        partial void OnSystemNameChanging(global::System.String value);
        partial void OnSystemNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Boolean _Status;
        partial void OnStatusChanging(global::System.Boolean value);
        partial void OnStatusChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemModule", "Module")]
        public EntityCollection<Module> Modules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Module>("AuthorizeModel.SystemModule", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Module>("AuthorizeModel.SystemModule", "Module", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemRoleSystem", "RoleSystem")]
        public EntityCollection<RoleSystem> RoleSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleSystem>("AuthorizeModel.SystemRoleSystem", "RoleSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleSystem>("AuthorizeModel.SystemRoleSystem", "RoleSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemUserSystem", "UserSystem")]
        public EntityCollection<UserSystem> UserSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSystem>("AuthorizeModel.SystemUserSystem", "UserSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSystem>("AuthorizeModel.SystemUserSystem", "UserSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemLoginLog", "LoginLog")]
        public EntityCollection<LoginLog> LoginLogs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LoginLog>("AuthorizeModel.SystemLoginLog", "LoginLog");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LoginLog>("AuthorizeModel.SystemLoginLog", "LoginLog", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="SystemEventLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SystemEventLog : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 SystemEventLog 对象。
        /// </summary>
        /// <param name="eventLogID">EventLogID 属性的初始值。</param>
        /// <param name="eventLogTime">EventLogTime 属性的初始值。</param>
        /// <param name="eventType">EventType 属性的初始值。</param>
        /// <param name="eventName">EventName 属性的初始值。</param>
        /// <param name="eventDescription">EventDescription 属性的初始值。</param>
        /// <param name="fromPC">FromPC 属性的初始值。</param>
        /// <param name="operateUser">OperateUser 属性的初始值。</param>
        /// <param name="targetSystem">TargetSystem 属性的初始值。</param>
        public static SystemEventLog CreateSystemEventLog(global::System.Guid eventLogID, global::System.String eventLogTime, global::System.String eventType, global::System.String eventName, global::System.String eventDescription, global::System.String fromPC, global::System.String operateUser, global::System.String targetSystem)
        {
            SystemEventLog systemEventLog = new SystemEventLog();
            systemEventLog.EventLogID = eventLogID;
            systemEventLog.EventLogTime = eventLogTime;
            systemEventLog.EventType = eventType;
            systemEventLog.EventName = eventName;
            systemEventLog.EventDescription = eventDescription;
            systemEventLog.FromPC = fromPC;
            systemEventLog.OperateUser = operateUser;
            systemEventLog.TargetSystem = targetSystem;
            return systemEventLog;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid EventLogID
        {
            get
            {
                return _EventLogID;
            }
            set
            {
                if (_EventLogID != value)
                {
                    OnEventLogIDChanging(value);
                    ReportPropertyChanging("EventLogID");
                    _EventLogID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventLogID");
                    OnEventLogIDChanged();
                }
            }
        }
        private global::System.Guid _EventLogID;
        partial void OnEventLogIDChanging(global::System.Guid value);
        partial void OnEventLogIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EventLogTime
        {
            get
            {
                return _EventLogTime;
            }
            set
            {
                OnEventLogTimeChanging(value);
                ReportPropertyChanging("EventLogTime");
                _EventLogTime = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EventLogTime");
                OnEventLogTimeChanged();
            }
        }
        private global::System.String _EventLogTime;
        partial void OnEventLogTimeChanging(global::System.String value);
        partial void OnEventLogTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EventType
        {
            get
            {
                return _EventType;
            }
            set
            {
                OnEventTypeChanging(value);
                ReportPropertyChanging("EventType");
                _EventType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EventType");
                OnEventTypeChanged();
            }
        }
        private global::System.String _EventType;
        partial void OnEventTypeChanging(global::System.String value);
        partial void OnEventTypeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EventName
        {
            get
            {
                return _EventName;
            }
            set
            {
                OnEventNameChanging(value);
                ReportPropertyChanging("EventName");
                _EventName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EventName");
                OnEventNameChanged();
            }
        }
        private global::System.String _EventName;
        partial void OnEventNameChanging(global::System.String value);
        partial void OnEventNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EventDescription
        {
            get
            {
                return _EventDescription;
            }
            set
            {
                OnEventDescriptionChanging(value);
                ReportPropertyChanging("EventDescription");
                _EventDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EventDescription");
                OnEventDescriptionChanged();
            }
        }
        private global::System.String _EventDescription;
        partial void OnEventDescriptionChanging(global::System.String value);
        partial void OnEventDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FromPC
        {
            get
            {
                return _FromPC;
            }
            set
            {
                OnFromPCChanging(value);
                ReportPropertyChanging("FromPC");
                _FromPC = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FromPC");
                OnFromPCChanged();
            }
        }
        private global::System.String _FromPC;
        partial void OnFromPCChanging(global::System.String value);
        partial void OnFromPCChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OperateUser
        {
            get
            {
                return _OperateUser;
            }
            set
            {
                OnOperateUserChanging(value);
                ReportPropertyChanging("OperateUser");
                _OperateUser = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OperateUser");
                OnOperateUserChanged();
            }
        }
        private global::System.String _OperateUser;
        partial void OnOperateUserChanging(global::System.String value);
        partial void OnOperateUserChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TargetSystem
        {
            get
            {
                return _TargetSystem;
            }
            set
            {
                OnTargetSystemChanging(value);
                ReportPropertyChanging("TargetSystem");
                _TargetSystem = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TargetSystem");
                OnTargetSystemChanged();
            }
        }
        private global::System.String _TargetSystem;
        partial void OnTargetSystemChanging(global::System.String value);
        partial void OnTargetSystemChanged();

        #endregion
    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 User 对象。
        /// </summary>
        /// <param name="userID">UserID 属性的初始值。</param>
        /// <param name="userName">UserName 属性的初始值。</param>
        /// <param name="pwd">Pwd 属性的初始值。</param>
        /// <param name="isLock">IsLock 属性的初始值。</param>
        /// <param name="isAdmin">IsAdmin 属性的初始值。</param>
        public static User CreateUser(global::System.Guid userID, global::System.String userName, global::System.String pwd, global::System.Boolean isLock, global::System.Boolean isAdmin)
        {
            User user = new User();
            user.UserID = userID;
            user.UserName = userName;
            user.Pwd = pwd;
            user.IsLock = isLock;
            user.IsAdmin = isAdmin;
            return user;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Pwd
        {
            get
            {
                return _Pwd;
            }
            set
            {
                OnPwdChanging(value);
                ReportPropertyChanging("Pwd");
                _Pwd = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Pwd");
                OnPwdChanged();
            }
        }
        private global::System.String _Pwd;
        partial void OnPwdChanging(global::System.String value);
        partial void OnPwdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ChineseName
        {
            get
            {
                return _ChineseName;
            }
            set
            {
                OnChineseNameChanging(value);
                ReportPropertyChanging("ChineseName");
                _ChineseName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ChineseName");
                OnChineseNameChanged();
            }
        }
        private global::System.String _ChineseName;
        partial void OnChineseNameChanging(global::System.String value);
        partial void OnChineseNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsLock
        {
            get
            {
                return _IsLock;
            }
            set
            {
                OnIsLockChanging(value);
                ReportPropertyChanging("IsLock");
                _IsLock = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsLock");
                OnIsLockChanged();
            }
        }
        private global::System.Boolean _IsLock;
        partial void OnIsLockChanging(global::System.Boolean value);
        partial void OnIsLockChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAdmin
        {
            get
            {
                return _IsAdmin;
            }
            set
            {
                OnIsAdminChanging(value);
                ReportPropertyChanging("IsAdmin");
                _IsAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAdmin");
                OnIsAdminChanged();
            }
        }
        private global::System.Boolean _IsAdmin;
        partial void OnIsAdminChanging(global::System.Boolean value);
        partial void OnIsAdminChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LoginPC
        {
            get
            {
                return _LoginPC;
            }
            set
            {
                OnLoginPCChanging(value);
                ReportPropertyChanging("LoginPC");
                _LoginPC = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LoginPC");
                OnLoginPCChanged();
            }
        }
        private global::System.String _LoginPC;
        partial void OnLoginPCChanging(global::System.String value);
        partial void OnLoginPCChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Memo
        {
            get
            {
                return _Memo;
            }
            set
            {
                OnMemoChanging(value);
                ReportPropertyChanging("Memo");
                _Memo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Memo");
                OnMemoChanged();
            }
        }
        private global::System.String _Memo;
        partial void OnMemoChanging(global::System.String value);
        partial void OnMemoChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserUserRole", "UserRole")]
        public EntityCollection<UserRole> UserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRole>("AuthorizeModel.UserUserRole", "UserRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRole>("AuthorizeModel.UserUserRole", "UserRole", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserUserSystem", "UserSystem")]
        public EntityCollection<UserSystem> UserSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSystem>("AuthorizeModel.UserUserSystem", "UserSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSystem>("AuthorizeModel.UserUserSystem", "UserSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserLoginLog", "LoginLog")]
        public EntityCollection<LoginLog> LoginLogs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LoginLog>("AuthorizeModel.UserLoginLog", "LoginLog");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LoginLog>("AuthorizeModel.UserLoginLog", "LoginLog", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="UserFunction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserFunction : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UserFunction 对象。
        /// </summary>
        /// <param name="userFunctionID">UserFunctionID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static UserFunction CreateUserFunction(global::System.Guid userFunctionID, global::System.Boolean isActive)
        {
            UserFunction userFunction = new UserFunction();
            userFunction.UserFunctionID = userFunctionID;
            userFunction.IsActive = isActive;
            return userFunction;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserFunctionID
        {
            get
            {
                return _UserFunctionID;
            }
            set
            {
                if (_UserFunctionID != value)
                {
                    OnUserFunctionIDChanging(value);
                    ReportPropertyChanging("UserFunctionID");
                    _UserFunctionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserFunctionID");
                    OnUserFunctionIDChanged();
                }
            }
        }
        private global::System.Guid _UserFunctionID;
        partial void OnUserFunctionIDChanging(global::System.Guid value);
        partial void OnUserFunctionIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserModuleUserFunction", "UserModule")]
        public UserModule UserModule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserModule>("AuthorizeModel.UserModuleUserFunction", "UserModule").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserModule>("AuthorizeModel.UserModuleUserFunction", "UserModule").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserModule> UserModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserModule>("AuthorizeModel.UserModuleUserFunction", "UserModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserModule>("AuthorizeModel.UserModuleUserFunction", "UserModule", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "FunctionUserFunction", "Function")]
        public Function Function
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionUserFunction", "Function").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionUserFunction", "Function").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Function> FunctionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Function>("AuthorizeModel.FunctionUserFunction", "Function");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Function>("AuthorizeModel.FunctionUserFunction", "Function", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="UserModule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserModule : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UserModule 对象。
        /// </summary>
        /// <param name="userModuleID">UserModuleID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static UserModule CreateUserModule(global::System.Guid userModuleID, global::System.Boolean isActive)
        {
            UserModule userModule = new UserModule();
            userModule.UserModuleID = userModuleID;
            userModule.IsActive = isActive;
            return userModule;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserModuleID
        {
            get
            {
                return _UserModuleID;
            }
            set
            {
                if (_UserModuleID != value)
                {
                    OnUserModuleIDChanging(value);
                    ReportPropertyChanging("UserModuleID");
                    _UserModuleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserModuleID");
                    OnUserModuleIDChanged();
                }
            }
        }
        private global::System.Guid _UserModuleID;
        partial void OnUserModuleIDChanging(global::System.Guid value);
        partial void OnUserModuleIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserSystemUserModule", "UserSystem")]
        public UserSystem UserSystem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserSystem>("AuthorizeModel.UserSystemUserModule", "UserSystem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserSystem>("AuthorizeModel.UserSystemUserModule", "UserSystem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserSystem> UserSystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserSystem>("AuthorizeModel.UserSystemUserModule", "UserSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserSystem>("AuthorizeModel.UserSystemUserModule", "UserSystem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserModuleUserFunction", "UserFunction")]
        public EntityCollection<UserFunction> UserFunctions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserFunction>("AuthorizeModel.UserModuleUserFunction", "UserFunction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserFunction>("AuthorizeModel.UserModuleUserFunction", "UserFunction", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "ModuleUserModule", "Module")]
        public Module Module
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleUserModule", "Module").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleUserModule", "Module").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("AuthorizeModel.ModuleUserModule", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("AuthorizeModel.ModuleUserModule", "Module", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="UserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRole : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UserRole 对象。
        /// </summary>
        /// <param name="userRoleID">UserRoleID 属性的初始值。</param>
        public static UserRole CreateUserRole(global::System.Guid userRoleID)
        {
            UserRole userRole = new UserRole();
            userRole.UserRoleID = userRoleID;
            return userRole;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserRoleID
        {
            get
            {
                return _UserRoleID;
            }
            set
            {
                if (_UserRoleID != value)
                {
                    OnUserRoleIDChanging(value);
                    ReportPropertyChanging("UserRoleID");
                    _UserRoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserRoleID");
                    OnUserRoleIDChanged();
                }
            }
        }
        private global::System.Guid _UserRoleID;
        partial void OnUserRoleIDChanging(global::System.Guid value);
        partial void OnUserRoleIDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "RoleUserRole", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleUserRole", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleUserRole", "Role").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("AuthorizeModel.RoleUserRole", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("AuthorizeModel.RoleUserRole", "Role", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserUserRole", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserRole", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserRole", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserRole", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("AuthorizeModel.UserUserRole", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AuthorizeModel", Name="UserSystem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserSystem : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UserSystem 对象。
        /// </summary>
        /// <param name="userSystemID">UserSystemID 属性的初始值。</param>
        /// <param name="isActive">IsActive 属性的初始值。</param>
        public static UserSystem CreateUserSystem(global::System.Guid userSystemID, global::System.Boolean isActive)
        {
            UserSystem userSystem = new UserSystem();
            userSystem.UserSystemID = userSystemID;
            userSystem.IsActive = isActive;
            return userSystem;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserSystemID
        {
            get
            {
                return _UserSystemID;
            }
            set
            {
                if (_UserSystemID != value)
                {
                    OnUserSystemIDChanging(value);
                    ReportPropertyChanging("UserSystemID");
                    _UserSystemID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserSystemID");
                    OnUserSystemIDChanged();
                }
            }
        }
        private global::System.Guid _UserSystemID;
        partial void OnUserSystemIDChanging(global::System.Guid value);
        partial void OnUserSystemIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserUserSystem", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserSystem", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserSystem", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("AuthorizeModel.UserUserSystem", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("AuthorizeModel.UserUserSystem", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "UserSystemUserModule", "UserModule")]
        public EntityCollection<UserModule> UserModules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserModule>("AuthorizeModel.UserSystemUserModule", "UserModule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserModule>("AuthorizeModel.UserSystemUserModule", "UserModule", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "CityUserSystem", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityUserSystem", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityUserSystem", "City").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("AuthorizeModel.CityUserSystem", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("AuthorizeModel.CityUserSystem", "City", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AuthorizeModel", "SystemUserSystem", "System")]
        public System System
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemUserSystem", "System").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemUserSystem", "System").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<System> SystemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<System>("AuthorizeModel.SystemUserSystem", "System");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<System>("AuthorizeModel.SystemUserSystem", "System", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
